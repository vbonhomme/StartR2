[{"path":"index.html","id":"preamble","chapter":"1 Preamble","heading":"1 Preamble","text":"book primarily intended students researchers interested R prior knowledge language.Dozens similar books web exist, even open free. one largely guided help 700+ students far, mostly 2014 2019. Also, wish R taught , almost 20 years ago.book transcription 20 hours training session take scratch general understanding language, practical data manipulation visualization. end , longer afraid list, writing functions dig stack overflow archives.Nowadays everyone hurry desire hit ground running R. Even , natural languages, mastering programming language takes years. book written mind often points curated resources can mastering particular aspect language.edition complete rewriting started 2022 first one, publicly released. edition aims put tidyverse even core maintain prior solid training R basic grammar philosophy. completely rewrote, keep updating whenever time .","code":""},{"path":"installation.html","id":"installation","chapter":"2 Installation","heading":"2 Installation","text":"","code":""},{"path":"installation.html","id":"installing-r-and-rstudio","chapter":"2 Installation","heading":"2.1 Installing R and RStudio","text":"need install R official website.Also install RStudio, one IDE (integrated development environment).now minimal yet fully working R installation. follows can directly done bare R yet Rstudio brings everything place nice, user-friendly productive environment.","code":""},{"path":"installation.html","id":"introducing-rstudio","chapter":"2 Installation","heading":"2.2 Introducing RStudio","text":"open RStudio, runs R background. startup four windows :Rstudio.pngFor now, focused two left column. top, “scripting” window, place write save code. Just , “console” can type code directly also throw lines full scripts window .typical workflow : ) try code console, ii) ’re happy , save script. help redo whenever wherever want analyses, ie reproducible analyses.console, arrows navigate command history. Ctrl+L erase console, history. can also access history “History” tab RStudio.scripting window, Ctrl+Enter execute current line, Maj+Ctrl+B execute every line top script current line. Use shortcuts beginning journey R! Moe can found Rstudio’s menu access “Keyboard shortcuts help”.","code":""},{"path":"r101.html","id":"r101","chapter":"3 R101","heading":"3 R101","text":"","code":""},{"path":"r101.html","id":"hello-world","chapter":"3 R101","heading":"3.1 Hello world","text":"follow tradition, let’s print message console. Open script, paste lines , save “hello.R” run . can also type directly console.can see, R code pretty natural easy read. Usually read right left (also nested brackets outer brackets)., typed message, explicitly created chain characters put quotes (\")1. use assignment operator <- whose direction indicates assign variable called hello.hello called, simply prints message console2.","code":"\nhello <- \"Hello world!\"\nhello## [1] \"Hello world!\""},{"path":"r101.html","id":"basic-arithmetics","chapter":"3 R101","heading":"3.2 Basic arithmetics","text":"’re likely manipulate numbers strings, go:R sophisticated calculator can use basic arithmetics. assigned result 32*2 variable called x, calculated square root x assigned another variable called y. , used function sqrt() short square root. sqrt function passed argument x, value latter retrived square root returned.* ^ arithmetic operators. can access typing ?Arithmetic console. operator roughly means “shortcut”, words, function call hides brackets.","code":"\nx <- 32*2\ny <- sqrt(x)\ny## [1] 8\ny^2## [1] 64"},{"path":"r101.html","id":"functions-and-help-pages","chapter":"3 R101","heading":"3.3 Functions and help pages","text":"R, everything brackets function call3.functions manual page can accessed using ?function_name, example ?print. general topics also accessible example ?Arithmetic.Every time discover /struggle function, read manual. Help pages exactly poetry: may appear boring disturbing first beauty concision ’re looking probably . also examples can copy/paste better understand do4.","code":""},{"path":"r101.html","id":"vectors","chapter":"3 R101","heading":"3.4 Vectors","text":"far, variables single value scalars. variable can vector contain single value. create vectors, use function c names stands “concatenate”.assigned new value x, previous one (64) lost. can see, calculating x^2, calculate square values x. functions behave way since return scalar, construction:accessed number elements x (length), sum standard deviation (sd).Now let say interested calculating sum integers 1 7, 1 100. can imagine, must smarter way typing c(1, 2, ..., 99, 100). ’re right, ’s job seq:","code":"\nx <- c(1, 2, 3, 4, 5, 6, 7)\nx^2## [1]  1  4  9 16 25 36 49\nlength(x)## [1] 7\nsum(x)## [1] 28\nsd(x)## [1] 2.160247\nsum(seq(from=1, to=100, by=1))## [1] 5050"},{"path":"r101.html","id":"the-golden-rule","chapter":"3 R101","heading":"3.5 The golden rule","text":"Possibly important rule R, programming language :something sounds dumb /repeatitive must smarter way .several ways avoid dumb /repeative things like vocabulary (knowing functions avoid paraphrasing) right grammar (ie defining functions avoid copy/pasting entire blocks minro changes ). sure, come naturally time mistakes. Everything time, first step make things work, aim smarter way.Back regular sequences, repetitive need shortcut , thanks operator :.","code":"\nsum(1:100)## [1] 5050"},{"path":"r101.html","id":"function-arguments","chapter":"3 R101","heading":"3.6 Function arguments","text":"using seq , can things different flavours regular sequences. ’s purpose functions arguments. can see arguments functions parameters options, call arguments. easily recognized come functions brackets. code explicitely named know, first glance, : start 1, go 100, increment 1.come blue function definition, function written someone else use . look manual. Past summary, second third section “Usage” “Arguments”. , everytime feel function something fits needs, probably find information manual. instance want, even numbers, sequence length 12, simply variants seq:compared syntax Usage section ?seq, probably note , omitted name first two arguments (), also third argument length. also abbreviated length.length, yet, works expected. rules know working arguments follows:can omit argument names long come order found Usage section.can abbreviate argument names long abbreviation unequivocal among defined argumentsIf argument specified, takes default value, mentionned Usage sectionYou can, yet never necessary good idea, change order arguments.words, commands strictly equivalent:","code":"\nseq(0, 10, by=2)## [1]  0  2  4  6  8 10\nseq(0, 10, length=4)## [1]  0.000000  3.333333  6.666667 10.000000\nseq(from=1, to=5, by=1.2)## [1] 1.0 2.2 3.4 4.6\nseq(f=1, t=5, b=1.2)## [1] 1.0 2.2 3.4 4.6\nseq(1, 5, 1.2)## [1] 1.0 2.2 3.4 4.6\nseq(by=1.2, to=5)## [1] 1.0 2.2 3.4 4.6"},{"path":"r101.html","id":"other-sequence-generators","chapter":"3 R101","heading":"3.7 Other sequence generators","text":"Also look rep replicated elements vectors:explored later, looking random number generation, named r+abbreviated_distribution_name:","code":"\nrep(1:3, each=3)## [1] 1 1 1 2 2 2 3 3 3\nrep(5:2, times=2)## [1] 5 4 3 2 5 4 3 2\nset.seed(123)\nrunif(5, 0, 1)## [1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673\nrnorm(10, 0, 1)##  [1] -1.6895557  1.2394959 -0.1089660 -0.1172420  0.1830826  1.2805549\n##  [7] -1.7272706  1.6901844  0.5038124  2.5283366"},{"path":"r101.html","id":"recycling","chapter":"3 R101","heading":"3.8 Recycling","text":"operation two vectors, usually done element-wise:length vectors compatible, R recycle shorted vector match length longer one. Usually, recycling useful may also troublesome, particularly come warning.","code":"\nx <- 1:5\ny <- 10:6\nx## [1] 1 2 3 4 5\ny## [1] 10  9  8  7  6\nx*y## [1] 10 18 24 28 30\nz <- c(0, 1)\nx## [1] 1 2 3 4 5\nz## [1] 0 1\nx+z # equivalent to c(1, 2, 3, 4, 5) + c(0, 1, 0, 1, 0)## Warning in x + z: longer object length is not a multiple of shorter object\n## length## [1] 1 3 3 5 5"},{"path":"r101.html","id":"indexing","chapter":"3 R101","heading":"3.9 Indexing","text":"access particular element object, use square bracket object[], index element access:R, first element 15.Indexing can used access particular value /change combined assignment operatorYou can also access one element:change single value time. Recycling applies hereSo far seed positive indexing sometimes also useful state elements want:can also use variables:","code":"\nx <- c(3, 1, 5, 4)\nx[2]## [1] 1\nx[3]/4## [1] 1.25\nx## [1] 3 1 5 4\nx[2] <- 1.2\nx## [1] 3.0 1.2 5.0 4.0\nx[2:4]## [1] 1.2 5.0 4.0\nx[c(1, 3)]## [1] 3 5\nx## [1] 3.0 1.2 5.0 4.0\nx[2:4] <- c(0.2, 0.4, 0.5)\nx## [1] 3.0 0.2 0.4 0.5\nx[2:4] <- 99\nx## [1]  3 99 99 99\nx <- 3:7\nx## [1] 3 4 5 6 7\nx[-1] # all but the first## [1] 4 5 6 7\nx[-length(x)] # all but the last## [1] 3 4 5 6\nx[-c(1, length(x))] # trim both ends## [1] 4 5 6\nindices <- c(1, 4)\nx <- -2:3\nx## [1] -2 -1  0  1  2  3\nx[indices]## [1] -2  1"},{"path":"r101.html","id":"tests-and-logicals","chapter":"3 R101","heading":"3.10 Tests and logicals","text":"can logical tests R. return vector type “logical”.can directly pass vector type logical indexing variable turn numeric indices:get full list relational operators, type ?Comparison. can also set operations, see ?sets; %% operator often used","code":"\nx <- 1:5\nx > 3## [1] FALSE FALSE FALSE  TRUE  TRUE\nx[x > 3]## [1] 4 5\nabove_three <- which(x>3)\nx[above_three]## [1] 4 5\nx## [1] 1 2 3 4 5\nx==4## [1] FALSE FALSE FALSE  TRUE FALSE\nx<=3## [1]  TRUE  TRUE  TRUE FALSE FALSE\nx!=2## [1]  TRUE FALSE  TRUE  TRUE  TRUE\nx %in% c(2, 4)## [1] FALSE  TRUE FALSE  TRUE FALSE"},{"path":"r101.html","id":"na","chapter":"3 R101","heading":"3.11 NA","text":"last command, tried access elements 1 5 increment 2 (ie {1, 3, 5}). x 4 elements, 5^th exist. R returns NA stands Non available. NAs common data analyses functions may work expected long single NA object ’re calculations :NA returned good reason: missing value 4 3 billions! want ignore NAs, must explicitely mention R. functions na.rm (remove NAs) arguments, otherwise na.omit function:","code":"\nx[seq(1, 5, by=2)]## [1] 1 3 5\nx <- c(1, 5, NA, 6)\nmean(x)## [1] NA\nmean(x, na.rm=TRUE)## [1] 4\nmean(na.omit(x))## [1] 4"},{"path":"r101.html","id":"other-structures","chapter":"3 R101","heading":"3.12 Other structures","text":"Besides scalars vectors, R can handle objects dimensions matrices 2-dimensionnal arrays, lists data.frame rectangular lists.","code":""},{"path":"r101.html","id":"matrices","chapter":"3 R101","heading":"3.12.1 Matrices","text":"Let’s begin matrices:Matrices rectangular objects contain number can many thing, including arithmetic operations:can indexed using syntax: object[, j]. one indexing argument, since now two dimensions. first row index, second column index convention. omit one, means “take ”. Otherwise, indexing rules applies.Among useful functions working matrices, :","code":"\nmat <- matrix(1:9, nrow=3, ncol=3)\nmat##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\nsum(mat)## [1] 45\nmat/2##      [,1] [,2] [,3]\n## [1,]  0.5  2.0  3.5\n## [2,]  1.0  2.5  4.0\n## [3,]  1.5  3.0  4.5\ncolSums(mat)## [1]  6 15 24\nmat[1, 2] # first row, second column## [1] 4\nmat[2, ] # second row## [1] 2 5 8\nmat[-2, c(1, 3)] # all rows but the second, first and third columns##      [,1] [,2]\n## [1,]    1    7\n## [2,]    3    9\ndim(mat) ## [1] 3 3\nnrow(mat)## [1] 3\nncol(mat)## [1] 3\ncolnames(mat) # not defined so far## NULL\ncolnames(mat) <- c(\"a\", \"b\", \"c\") # let's name columns\ncolnames(mat) # now defined## [1] \"a\" \"b\" \"c\""},{"path":"r101.html","id":"lists","chapter":"3 R101","heading":"3.12.2 Lists","text":"Lists vectors can contain objects different type. can named :can indexed three different syntaxes: [, [[ $. $ work single named element:mostly useful working data.frames particular flavor lists, retrieve single column. back later.Single double square brackets quite confusing first glance, allow retrieve either element retain list nature ([), element dropping list nature ([[):","code":"\nx <- list(a=1, b=\"hello\", c=mat)\nx## $a\n## [1] 1\n## \n## $b\n## [1] \"hello\"\n## \n## $c\n##      a b c\n## [1,] 1 4 7\n## [2,] 2 5 8\n## [3,] 3 6 9\nx$mat## NULL\nx[1]## $a\n## [1] 1\nclass(x[1])## [1] \"list\"\n# x[1] + 3 This won't work as we still have a list\n\nx[[1]]## [1] 1\nclass(x[[1]])## [1] \"numeric\"\nx[[1]]+3## [1] 4"},{"path":"r101.html","id":"data.frames","chapter":"3 R101","heading":"3.12.3 data.frames","text":"Data frames rectangular lists. natural structure data analysis correspond spreadheet.Consequently practically, also central object modern R, core tidyverse grammar.","code":""},{"path":"r101.html","id":"footnotes","chapter":"3 R101","heading":"3.13 Footnotes","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
